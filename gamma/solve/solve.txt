1. анализируем файл encrypt.py (результат в файле encrypt-commented.py)
2. из пункта 1 понимаем:
    - ключ повторяется каждые 256 байт
    - файл дополняется до размера, кратного 1024
    - файл шифруется функцией xor
3. предполагаем, что в конце файла есть 1-2 блока из нулевых байт, зашифрованных xor
    если это подтвердится, это означает, что в конце зашифрованного файла записался ключ, 
    т.к. (x xor 0) = x
4. проверяем гипотезу:
e@h:~/ctf24/writeups/gamma/solve$ cat ../task/flag.pdf.encrypted | tail -c 512|xxd
предпоследний 256-байтный блок файла:
00000000: 1eb2 81f3 fd4a 3ecf 3e1e e670 381f c2c7  .....J>.>..p8...
00000010: 1ee9 f20a ac42 320a a08c 4006 254b 4b2a  .....B2...@.%KK*
00000020: bec9 2b58 5484 7a03 be75 ce7e f9e5 2467  ..+XT.z..u.~..$g
00000030: b936 86e8 8a7b f605 3340 171b 998e 70f6  .6...{..3@....p.
00000040: 19a3 ee82 d989 5aae cd6f 44e5 081b 300d  ......Z..oD...0.
00000050: a875 26a6 84e4 8013 0293 94ce 0def 7cf1  .u&...........|.
00000060: dd96 c553 f5c1 3f1e ec1c 76ac 61f0 758d  ...S..?...v.a.u.
00000070: 7103 d34b c9e7 93ae 4dd3 5394 86ef 1cc1  q..K....M.S.....
00000080: a49c af98 6066 dc15 92fe 6671 d820 68bb  ....`f....fq. h.
00000090: 446d fa5c 6af0 8a70 5ae8 2a8f 6d4c 55c7  Dm.\j..pZ.*.mLU.
000000a0: b25a 2e34 9208 7679 501b bafb 52f6 320e  .Z.4..vyP...R.2.
000000b0: bffc 2447 17d3 35b0 12fc ae3d da31 9b0e  ..$G..5....=.1..
000000c0: 86cc c5da be73 9491 2ffb 0fe2 7738 0dd2  .....s../...w8..
000000d0: 9323 7ece 4b2d 6a96 1e20 4a68 a0c0 b441  .#~.K-j.. Jh...A
000000e0: b196 82b4 676f 854a 4895 dfc9 d6e7 62a5  ....go.JH.....b.
000000f0: 8bb2 a908 206f 6fab fbe9 4a8a e0b5 4fd6  .... oo...J...O.
# последний 256-байтный блок файла:
00000100: 1eb2 81f3 fd4a 3ecf 3e1e e670 381f c2c7  .....J>.>..p8...
00000110: 1ee9 f20a ac42 320a a08c 4006 254b 4b2a  .....B2...@.%KK*
00000120: bec9 2b58 5484 7a03 be75 ce7e f9e5 2467  ..+XT.z..u.~..$g
00000130: b936 86e8 8a7b f605 3340 171b 998e 70f6  .6...{..3@....p.
00000140: 19a3 ee82 d989 5aae cd6f 44e5 081b 300d  ......Z..oD...0.
00000150: a875 26a6 84e4 8013 0293 94ce 0def 7cf1  .u&...........|.
00000160: dd96 c553 f5c1 3f1e ec1c 76ac 61f0 758d  ...S..?...v.a.u.
00000170: 7103 d34b c9e7 93ae 4dd3 5394 86ef 1cc1  q..K....M.S.....
00000180: a49c af98 6066 dc15 92fe 6671 d820 68bb  ....`f....fq. h.
00000190: 446d fa5c 6af0 8a70 5ae8 2a8f 6d4c 55c7  Dm.\j..pZ.*.mLU.
000001a0: b25a 2e34 9208 7679 501b bafb 52f6 320e  .Z.4..vyP...R.2.
000001b0: bffc 2447 17d3 35b0 12fc ae3d da31 9b0e  ..$G..5....=.1..
000001c0: 86cc c5da be73 9491 2ffb 0fe2 7738 0dd2  .....s../...w8..
000001d0: 9323 7ece 4b2d 6a96 1e20 4a68 a0c0 b441  .#~.K-j.. Jh...A
000001e0: b196 82b4 676f 854a 4895 dfc9 d6e7 62a5  ....go.JH.....b.
000001f0: 8bb2 a908 206f 6fab fbe9 4a8a e0b5 4c1e  .... oo...J...L.
5. видим, что последний и предпоследний блок отличаются двумя последними байтами 
    (из-за того, что два последних байта последнего блока содержат 
    количество дополненных пришифровании байтов)
    это означает, что в предпоследний блока записался ключ шифрования (пункт 3)
6. пишем decrypt.py и расшифровываем флаг